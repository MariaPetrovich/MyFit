# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest
        # Импортирование необходимых модулей
import datetime

# Класс пользовательского профиля
class UserProfile:
    def __init__(self, name, age, weight, height):
        self.name = name
        self.age = age
        self.weight = weight
        self.height = height

    def calculate_bmi(self):
        # Расчет индекса массы тела
        bmi = self.weight / (self.height ** 2)
        return bmi

# Класс упражнения
class Exercise:
    def __init__(self, name, intensity):
        self.name = name
        self.intensity = intensity

# Класс тренировки
class Workout:
    def __init__(self, exercises, duration):
        self.exercises = exercises
        self.duration = duration

    def calculate_calories_burned(self, user):
        # Расчет потраченных калорий
        calories_burned = 0
        for exercise in self.exercises:
            calories_burned += exercise.intensity * user.weight * self.duration
        return calories_burned

# Создание пользовательского профиля
user_profile = UserProfile("John Doe", 25, 70, 1.75)

# Создание упражнений
exercises = [
    Exercise("Push-ups", 5),
    Exercise("Squats", 4),
    Exercise("Plank", 3)
]

# Создание тренировки
workout = Workout(exercises, 30)

# Расчет индекса массы тела пользователя
bmi = user_profile.calculate_bmi()

# Расчет потраченных калорий пользователя во время тренировки
calories_burned = workout.calculate_calories_burned(user_profile)

# Вывод результатов
print("User:", user_profile.name)
print("BMI:", bmi)
print("Calories Burned:", calories_burned)
